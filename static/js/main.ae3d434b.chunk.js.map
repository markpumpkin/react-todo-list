{"version":3,"sources":["components/todo/Header.jsx","actions/todo.js","components/todo/Item.jsx","components/todo/TodoList.jsx","components/todo/Footer.jsx","pages/Todo.js","App.js","reducers/todo.js","reducers/index.js","store.js","index.js"],"names":["Header","dispatch","useDispatch","newId","now","Date","getMonth","toString","getDate","getUTCMilliseconds","Math","trunc","random","ramdomId","crTextWriting","useSelector","state","todo","className","placeholder","onKeyDown","e","keyCode","action","type","payload","addNewTodo","id","title","completed","editing","previousTitle","value","onChange","changeInput","target","Item","props","item","data","itemClass","undefined","getClassItem","checked","editItemStatus","handleChangeStatus","onDoubleClick","editItem","handleStartEditItem","onClick","deleteItem","handleRemoveItem","editDone","key","defaultValue","TodoList","todoList","toggleCompleted","name","htmlFor","map","Footer","filter","crFilter","todos","list","handleClickFilter","param","filterByParam","itemLeft","length","href","Todo","crTodos","crList","useEffect","setInitialData","App","initialState","curretFilter","newCRList","isFilter","checkToggleCompleted","newList","itemsCompleted","todoReducer","push","localStorage","setItem","JSON","stringify","getItem","parse","filterTodos","forEach","element","text","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae3d434b.chunk.js","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNewTodo, changeInput } from '../../actions/todo';\n\nconst ramdomId = () => {\n    var now = new Date();\n    var timestamp = now.getMonth().toString() + now.getDate().toString() + now.getUTCMilliseconds();\n    return timestamp + Math.trunc(Math.random() * 9000);\n}\n\nconst Header = () => {\n    const dispatch = useDispatch();\n    const newId = ramdomId();\n    const crTextWriting = useSelector(state => state.todo.crTextWriting);\n    \n    const handleAddTodo = (e) => {\n        if (e.keyCode === 13) {\n            const newItem = {\n                id: newId,\n                title: crTextWriting,\n                completed: false,\n                editing: false,\n                previousTitle: '',\n            }\n\n            const action = addNewTodo(newItem);\n            dispatch(action);\n        }\n    }\n\n    const handleChangeInput = (e) => {\n        let title = e.target.value;\n\n        const action = changeInput(title);\n        dispatch(action);\n    }\n\n    return (\n      <header className=\"header\">\n        <h1>Todos</h1>\n        <input \n          className=\"new-todo\" \n          placeholder=\"What needs to be done?\" \n          onKeyDown={handleAddTodo}\n          value={crTextWriting}\n          onChange={handleChangeInput}\n        />\n      </header>\n    );\n}\n\nexport default Header;\n","\nexport const setInitialData = (todo) => {\n    return {\n        type: 'INITIAL_TODO',\n        payload: todo,\n    }\n}\n\nexport const addNewTodo = (todo) => {\n    return {\n        type: 'ADD_TODO',\n        payload: todo,\n    }\n}\n\nexport const setDoneTodo = (todo) => {\n    return {\n        type: 'SET_DONE_TODO',\n        payload: todo,\n    }\n}\n\nexport const editItemStatus = (item) => {\n    return {\n        type: 'EDIT_ITEM_STATUS',\n        payload: item,\n    }\n}\n\nexport const deleteItem = (item) => {\n    return {\n        type: 'DELETE_ITEM',\n        payload: item,\n    }\n}\n\nexport const filterByParam = (param) => {\n    return {\n        type: 'FILTER_ITEMS',\n        payload: param,\n    }\n}\n\nexport const removeCompleted = () => {\n    return {\n        type: 'REMOVE_COMPLETED',\n        payload: null,\n    }\n}\n\nexport const changeInput = (title) => {\n    return {\n        type: 'CHANGE_INPUT_VALUE',\n        payload: title,\n    }\n}\n\nexport const toggleItems = () => {\n    return {\n        type: 'TOGGLE_ITEMS_COMPLETED',\n        payload: null,\n    }\n}\n\nexport const editItem = (item) => {\n    return {\n        type: 'EDIT_ITEM',\n        payload: item,\n    }\n}\n\nexport const editDone = (item) => {\n    return {\n        type: 'EDIT_ITEM_DONE',\n        payload: item,\n    }\n}\n\nexport const editDestroy = () => {\n    return {\n        type: 'EDIT_DESTROY',\n        payload: null,\n    }\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editItemStatus, deleteItem, editItem, editDone, editDestroy } from '../../actions/todo';\n\nconst Item = (props) => {\n    const dispatch = useDispatch();\n    const item = props.data;\n\n    const handleChangeStatus = (item) => {\n        const action = editItemStatus(item);\n        dispatch(action);\n    }\n\n    const handleRemoveItem = (item) => {\n        const action = deleteItem(item);\n        dispatch(action);\n    }\n\n    const handleStartEditItem = (item) => {\n        const action = editItem(item);\n        dispatch(action);\n    }\n \n    const handleEditDone = (e) => {\n        if (e.keyCode === 13) {\n            let newItem = {\n                id: item.id,\n                title: e.target.value,\n            }\n            \n            const action = editDone(newItem);\n            dispatch(action);\n        } \n        if (e.key === 'Escape') {\n            const action = editDestroy();\n            dispatch(action);\n        }\n    }\n\n    const getClassItem = (item) => {\n        let itemClass = '';\n        if (item.completed) {\n            itemClass += 'completed ';\n        }\n        if (item.editing !== undefined && item.editing) {\n            itemClass += ' editing';\n        }\n        \n        return itemClass;\n    }\n\n    return (\n        <li id={item.id} className={getClassItem(item)}>\n            <div className=\"view\">\n                <input className=\"toggle\" type=\"checkbox\" checked={item.completed} onChange={() => handleChangeStatus(item)}/>\n                <label onDoubleClick={() => handleStartEditItem(item)}>{item.title}</label>\n                <button className=\"destroy\" onClick={() => handleRemoveItem(item)}></button>\n            </div>\n            <input \n                className=\"edit\" \n                onKeyDown={handleEditDone}\n                defaultValue={item.previousTitle}\n            />\n        </li>\n    );\n}\n\nexport default Item;\n","import React from 'react';\nimport Item from './Item';\nimport { useDispatch } from 'react-redux';\nimport { toggleItems } from '../../actions/todo';\n\nfunction TodoList(props) {\n    const { todoList, toggleCompleted } = props;\n    const dispatch = useDispatch();\n    \n    const handleToggleItems = () => {\n        const action = toggleItems();\n        dispatch(action);\n    }\n\n    return (\n        <section className=\"main\" >\n            <input id=\"toggle-all\" name=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" onChange={handleToggleItems} checked={toggleCompleted}/>\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <ul className=\"todo-list\">\n                {\n                    todoList.map((data, key) => <Item key={key} data={data} />)\n                }\n            </ul>\n        </section>\n    );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterByParam, removeCompleted } from '../../actions/todo';\n\nconst Footer = () => {\n    const filter = useSelector(state => state.todo.crFilter);\n    const todos = useSelector(state => state.todo.list);\n    const dispatch = useDispatch();\n\n    const handleClickFilter = (param) => {\n        const action = filterByParam(param);\n        dispatch(action);\n    }\n    \n    const handleRemoveCompleted = () => {\n        const action = removeCompleted();\n        dispatch(action);\n    }\n\n    const itemLeft = (todos) => {\n        return todos.filter(item => item.completed === false).length;\n    }\n\n    return (\n        <footer className=\"footer\">\n            <span className=\"todo-count\"> {itemLeft(todos)} {itemLeft(todos) === 1 ? 'item' : 'items'} left</span>\n            <ul className=\"filters\">\n                <li>\n                    <a href=\"#all\" className={filter === 'all' ? 'selected' : ''} onClick={() => handleClickFilter('all')}>All</a>\n                </li>\n                <li>\n                    <a href=\"#active\" className={filter === 'active' ? 'selected' : ''} onClick={() => handleClickFilter('active')}>Active</a>\n                </li>\n                <li>\n                    <a href=\"#completed\" className={filter === 'completed' ? 'selected' : ''} onClick={() => handleClickFilter('completed')}>Completed</a>\n                </li>\n            </ul>\n            <button className=\"clear-completed\" onClick={handleRemoveCompleted}>Clear completed</button>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setInitialData } from \"../actions/todo\";\nimport Header from \"../components/todo/Header\";\nimport TodoList from \"../components/todo/TodoList\";\nimport Footer from \"../components/todo/Footer\";\n\nconst Todo = () => {\n    const todos = useSelector((state) => state.todo.list);\n    const crTodos = useSelector((state) => state.todo.crList);\n    const toggleCompleted = useSelector((state) => state.todo.toggleCompleted);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const action = setInitialData();\n        dispatch(action);\n    }, [dispatch]);\n\n    return (\n        <div className=\"todoapp\">\n            <Header />\n            {todos.length ? <TodoList todoList={crTodos} toggleCompleted={toggleCompleted} /> : \"\"}\n            {todos.length ? <Footer /> : \"\"}\n        </div>\n    );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './pages/Todo';\nimport './App.css';\n\nconst App = () => {\n    return (\n        <Todo />\n    );\n}\n\nexport default App;\n","const initialState = {\n    list: [],\n    crList: [],\n    crFilter: 'all',\n    crTextWriting: '',\n    toggleCompleted: false,\n}\n\nconst todoReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_TODO': {\n            const newList = [...state.list];\n            newList.push(action.payload);\n            let newCRList = curretFilter(newList, state.crFilter);\n\n            localStorage.setItem('nb-todos', JSON.stringify(newList));\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n\n            return {\n                ...state,\n                list: newList,\n                crList: newCRList,\n                crTextWriting: '',\n            };\n        }\n\n        case 'INITIAL_TODO': {\n            let todos = localStorage.getItem('nb-todos')\n            ? JSON.parse(localStorage.getItem('nb-todos'))\n            : [];\n\n            let filterTodos = localStorage.getItem('nb-filter-todos')\n            ? JSON.parse(localStorage.getItem('nb-filter-todos'))\n            : [];\n\n            let isFilter = state.crFilter;\n            if (todos.length === filterTodos.length) {\n                isFilter = 'all';\n            } else {\n                isFilter = filterTodos[0].completed ? 'completed' : 'active';\n            }\n\n            const itemsCompleted = todos.filter(item => item.completed === true);\n            let toggleCompleted = state.toggleCompleted;\n            if (todos.length === itemsCompleted.length) {\n                toggleCompleted = true;\n            }\n\n            return {\n                ...state,\n                list: todos,\n                crList: filterTodos,\n                crFilter: isFilter,\n                toggleCompleted: toggleCompleted,\n            };\n        }\n        \n        case 'EDIT_ITEM': {\n            let newCRList = [...state.crList];\n            newCRList.forEach(item => {\n                item.editing = false;\n                if (item.id === action.payload.id) {\n                    item.editing = true;\n                    item.previousTitle = action.payload.title;\n                }\n            });\n\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n\n            return {\n                ...state,\n                crList: newCRList,\n            };\n        }\n        \n        case 'EDIT_ITEM_DONE': {\n            let newList = [...state.list];\n\n            if (action.payload.title === '') {\n                newList = newList.filter(item => item.id !== action.payload.id);\n            } else {\n                newList.forEach(item => {\n                    if (item.id === action.payload.id) {\n                        item.title = action.payload.title;\n                        item.editing = false;\n                        item.previousTitle = '';\n                    }   \n                });\n            }\n            \n            let newCRList = curretFilter(newList, state.crFilter);\n\n            localStorage.setItem('nb-todos', JSON.stringify(newList));\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n\n            return {\n                ...state,\n                list: newList,\n                crList: newCRList,\n            };\n        }\n        \n        case 'EDIT_ITEM_STATUS': {\n            let newList = [...state.list];\n            newList.forEach(element => {\n                if (element.id === action.payload.id) {\n                    element.completed = !element.completed;\n                }\n            });\n            let newCRList = curretFilter(newList, state.crFilter);\n            let toggleCompleted = checkToggleCompleted(newList);\n\n            localStorage.setItem('nb-todos', JSON.stringify(newList));\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n            \n            return {\n                ...state,\n                list: newList,\n                crList: newCRList,\n                toggleCompleted: toggleCompleted,\n            };\n        }\n\n        case 'EDIT_DESTROY': {\n            let newList = [...state.list];\n            newList.forEach(item => {item.editing = false; item.previousTitle = ''; });\n\n            let newCRList = curretFilter(newList, state.crFilter);\n\n            localStorage.setItem('nb-todos', JSON.stringify(newList));\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n\n            return {\n                ...state,\n                list: newList,\n                crList: newCRList,\n            };\n        }\n        \n        case 'DELETE_ITEM': {\n            let newList = [...state.list];\n            newList = newList.filter(item => item.id !== action.payload.id);\n            let newCRList = curretFilter(newList, state.crFilter);\n\n            localStorage.setItem('nb-todos', JSON.stringify(newList));\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n\n            return {\n                ...state,\n                list: newList,\n                crList: newCRList,\n            };\n        }\n        \n        case 'REMOVE_COMPLETED': {\n            let newList = [...state.list];\n            newList = newList.filter(item => item.completed !== true);\n            let newCRList = curretFilter(newList, state.crFilter);\n\n            localStorage.setItem('nb-todos', JSON.stringify(newList));\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n\n            return {\n                ...state,\n                list: newList,\n                crList: newCRList,\n            };\n        }\n        \n        case 'FILTER_ITEMS': {\n            let newCRList = curretFilter([...state.list], action.payload);\n            \n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n            \n            return {\n                ...state,\n                crList: newCRList,\n                crFilter: action.payload,\n            };\n        }\n        \n        case 'CHANGE_INPUT_VALUE': {\n            let text = action.payload;\n            \n            return {\n                ...state,\n                crTextWriting: text,\n            };\n        }\n        \n        case 'TOGGLE_ITEMS_COMPLETED': {\n            let newList = [...state.list];\n            let toggleCompleted = checkToggleCompleted(newList);\n            newList.forEach(item => item.editing = false);\n            \n            if (toggleCompleted) {\n                newList.forEach(item => item.completed = false);\n            } else {\n                newList.forEach(item => item.completed = true);\n            }\n\n            let newCRList = curretFilter(newList, state.crFilter);\n\n            localStorage.setItem('nb-todos', JSON.stringify(newList));\n            localStorage.setItem('nb-filter-todos', JSON.stringify(newCRList));\n            \n            return {\n                ...state,\n                list: newList,\n                crList: newCRList,\n                crFilter: 'all',\n                toggleCompleted: !toggleCompleted,\n            };\n        }\n\n        default: \n            return state;\n    }\n}\n\nconst isFilter = (param) => {\n    let completed = null;\n    switch (param) {\n        case 'completed':\n            completed = true;\n            break;\n        case 'active':\n            completed = false\n            break;\n        default:\n            completed = null;\n            break;\n    }\n    return completed;\n}\n\nconst curretFilter = (todos, crFilter) => {\n    let newCRList = todos;\n    let completed = isFilter(crFilter);\n\n    if (completed !== null) {\n        newCRList = newCRList.filter(item => item.completed === completed);\n    }\n    \n    return newCRList;\n}\n\nconst checkToggleCompleted = (todos, toggleCompleted = false) => {\n    let newList = todos;\n    let itemsCompleted = newList.filter(item => item.completed === true);\n    if (newList.length === itemsCompleted.length) {\n        toggleCompleted = true;\n    }\n\n    return toggleCompleted;\n}\n\nexport default todoReducer;\n","import { combineReducers } from 'redux';\nimport todoReducer from './todo';\n\nconst rootReducer = combineReducers({\n    todo: todoReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}